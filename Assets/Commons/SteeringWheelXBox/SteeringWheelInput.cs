//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Commons/SteeringWheelXBox/SteeringWheelInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SteeringWheelInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SteeringWheelInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SteeringWheelInput"",
    ""maps"": [
        {
            ""name"": ""SteeringWheel"",
            ""id"": ""183b8e9d-988d-415b-8c86-3479c78d6714"",
            ""actions"": [
                {
                    ""name"": ""RotateWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5b14d9e0-a425-4130-94be-ef18dab197f4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""X"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eaaa51b3-89d9-464e-ac7f-2a7ef4cd1e35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fdbff4be-9094-4ec3-b134-5d6e80d32cbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""PassThrough"",
                    ""id"": ""849f83ee-854d-45fa-81ba-e20e40658001"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""PassThrough"",
                    ""id"": ""61d0ad9b-2eb2-40ec-9975-0335434c7a8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""PassThrough"",
                    ""id"": ""31459691-a40a-4f31-89fe-ff2ac1034956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58f7d61b-21fc-40ab-a3f3-eac60a06dfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4fd3c7a9-5475-4698-90bf-7519013df461"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""PassThrough"",
                    ""id"": ""999092dd-bac1-4c17-bd85-0cc9542ac5a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelLeftTriggerBt"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3cf85671-8fc3-41dd-8332-3231c287e7df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WheelRightTriggerBt"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c4e05df0-9652-4a7b-a2c9-6f3392c8ad56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GearShiftUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4549a32b-64f6-4a48-a158-1b6a1fe2e2c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearShiftDown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f8150c16-a4cb-40c7-bcf1-b1886014457e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21f5700b-2849-4355-b9be-461ad5599df4"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e4513c6-a6a9-44dc-ab95-5229f0d0b961"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a285239a-1cdb-41bf-9b8c-6bf5dac42bff"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8abc49b7-b6d1-4a1d-a14f-b16a18cf98df"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""905d4a27-ffb8-4221-864a-fae1f1e6b06b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78a19a3a-b429-4891-aedb-845ce4041279"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d40cb0bd-cb23-4900-8e7e-c1ab9df38f21"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a63164c-ba50-4bf3-a4b2-da8861d59439"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""126b6043-1cea-4d80-a85d-79c28c9f7d7d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f02b408-7752-48f7-96dc-c29de19c8efc"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearShiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a787b9ce-2a10-4efb-88ae-bcab6b6e7bd9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearShiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc2a29d6-8ea3-4a86-88d8-e48ab43d87fa"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelRightTriggerBt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a91e17d6-5841-4182-bba7-30af7a5b9035"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WheelLeftTriggerBt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SteeringWheel
        m_SteeringWheel = asset.FindActionMap("SteeringWheel", throwIfNotFound: true);
        m_SteeringWheel_RotateWheel = m_SteeringWheel.FindAction("RotateWheel", throwIfNotFound: true);
        m_SteeringWheel_X = m_SteeringWheel.FindAction("X", throwIfNotFound: true);
        m_SteeringWheel_Y = m_SteeringWheel.FindAction("Y", throwIfNotFound: true);
        m_SteeringWheel_A = m_SteeringWheel.FindAction("A", throwIfNotFound: true);
        m_SteeringWheel_B = m_SteeringWheel.FindAction("B", throwIfNotFound: true);
        m_SteeringWheel_Left = m_SteeringWheel.FindAction("Left", throwIfNotFound: true);
        m_SteeringWheel_Up = m_SteeringWheel.FindAction("Up", throwIfNotFound: true);
        m_SteeringWheel_Down = m_SteeringWheel.FindAction("Down", throwIfNotFound: true);
        m_SteeringWheel_Right = m_SteeringWheel.FindAction("Right", throwIfNotFound: true);
        m_SteeringWheel_WheelLeftTriggerBt = m_SteeringWheel.FindAction("WheelLeftTriggerBt", throwIfNotFound: true);
        m_SteeringWheel_WheelRightTriggerBt = m_SteeringWheel.FindAction("WheelRightTriggerBt", throwIfNotFound: true);
        m_SteeringWheel_GearShiftUp = m_SteeringWheel.FindAction("GearShiftUp", throwIfNotFound: true);
        m_SteeringWheel_GearShiftDown = m_SteeringWheel.FindAction("GearShiftDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SteeringWheel
    private readonly InputActionMap m_SteeringWheel;
    private List<ISteeringWheelActions> m_SteeringWheelActionsCallbackInterfaces = new List<ISteeringWheelActions>();
    private readonly InputAction m_SteeringWheel_RotateWheel;
    private readonly InputAction m_SteeringWheel_X;
    private readonly InputAction m_SteeringWheel_Y;
    private readonly InputAction m_SteeringWheel_A;
    private readonly InputAction m_SteeringWheel_B;
    private readonly InputAction m_SteeringWheel_Left;
    private readonly InputAction m_SteeringWheel_Up;
    private readonly InputAction m_SteeringWheel_Down;
    private readonly InputAction m_SteeringWheel_Right;
    private readonly InputAction m_SteeringWheel_WheelLeftTriggerBt;
    private readonly InputAction m_SteeringWheel_WheelRightTriggerBt;
    private readonly InputAction m_SteeringWheel_GearShiftUp;
    private readonly InputAction m_SteeringWheel_GearShiftDown;
    public struct SteeringWheelActions
    {
        private @SteeringWheelInput m_Wrapper;
        public SteeringWheelActions(@SteeringWheelInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateWheel => m_Wrapper.m_SteeringWheel_RotateWheel;
        public InputAction @X => m_Wrapper.m_SteeringWheel_X;
        public InputAction @Y => m_Wrapper.m_SteeringWheel_Y;
        public InputAction @A => m_Wrapper.m_SteeringWheel_A;
        public InputAction @B => m_Wrapper.m_SteeringWheel_B;
        public InputAction @Left => m_Wrapper.m_SteeringWheel_Left;
        public InputAction @Up => m_Wrapper.m_SteeringWheel_Up;
        public InputAction @Down => m_Wrapper.m_SteeringWheel_Down;
        public InputAction @Right => m_Wrapper.m_SteeringWheel_Right;
        public InputAction @WheelLeftTriggerBt => m_Wrapper.m_SteeringWheel_WheelLeftTriggerBt;
        public InputAction @WheelRightTriggerBt => m_Wrapper.m_SteeringWheel_WheelRightTriggerBt;
        public InputAction @GearShiftUp => m_Wrapper.m_SteeringWheel_GearShiftUp;
        public InputAction @GearShiftDown => m_Wrapper.m_SteeringWheel_GearShiftDown;
        public InputActionMap Get() { return m_Wrapper.m_SteeringWheel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SteeringWheelActions set) { return set.Get(); }
        public void AddCallbacks(ISteeringWheelActions instance)
        {
            if (instance == null || m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Add(instance);
            @RotateWheel.started += instance.OnRotateWheel;
            @RotateWheel.performed += instance.OnRotateWheel;
            @RotateWheel.canceled += instance.OnRotateWheel;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @WheelLeftTriggerBt.started += instance.OnWheelLeftTriggerBt;
            @WheelLeftTriggerBt.performed += instance.OnWheelLeftTriggerBt;
            @WheelLeftTriggerBt.canceled += instance.OnWheelLeftTriggerBt;
            @WheelRightTriggerBt.started += instance.OnWheelRightTriggerBt;
            @WheelRightTriggerBt.performed += instance.OnWheelRightTriggerBt;
            @WheelRightTriggerBt.canceled += instance.OnWheelRightTriggerBt;
            @GearShiftUp.started += instance.OnGearShiftUp;
            @GearShiftUp.performed += instance.OnGearShiftUp;
            @GearShiftUp.canceled += instance.OnGearShiftUp;
            @GearShiftDown.started += instance.OnGearShiftDown;
            @GearShiftDown.performed += instance.OnGearShiftDown;
            @GearShiftDown.canceled += instance.OnGearShiftDown;
        }

        private void UnregisterCallbacks(ISteeringWheelActions instance)
        {
            @RotateWheel.started -= instance.OnRotateWheel;
            @RotateWheel.performed -= instance.OnRotateWheel;
            @RotateWheel.canceled -= instance.OnRotateWheel;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @WheelLeftTriggerBt.started -= instance.OnWheelLeftTriggerBt;
            @WheelLeftTriggerBt.performed -= instance.OnWheelLeftTriggerBt;
            @WheelLeftTriggerBt.canceled -= instance.OnWheelLeftTriggerBt;
            @WheelRightTriggerBt.started -= instance.OnWheelRightTriggerBt;
            @WheelRightTriggerBt.performed -= instance.OnWheelRightTriggerBt;
            @WheelRightTriggerBt.canceled -= instance.OnWheelRightTriggerBt;
            @GearShiftUp.started -= instance.OnGearShiftUp;
            @GearShiftUp.performed -= instance.OnGearShiftUp;
            @GearShiftUp.canceled -= instance.OnGearShiftUp;
            @GearShiftDown.started -= instance.OnGearShiftDown;
            @GearShiftDown.performed -= instance.OnGearShiftDown;
            @GearShiftDown.canceled -= instance.OnGearShiftDown;
        }

        public void RemoveCallbacks(ISteeringWheelActions instance)
        {
            if (m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISteeringWheelActions instance)
        {
            foreach (var item in m_Wrapper.m_SteeringWheelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SteeringWheelActions @SteeringWheel => new SteeringWheelActions(this);
    public interface ISteeringWheelActions
    {
        void OnRotateWheel(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnWheelLeftTriggerBt(InputAction.CallbackContext context);
        void OnWheelRightTriggerBt(InputAction.CallbackContext context);
        void OnGearShiftUp(InputAction.CallbackContext context);
        void OnGearShiftDown(InputAction.CallbackContext context);
    }
}
